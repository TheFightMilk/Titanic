train.x <- model.matrix(~-1+.,data=train.x)
train.y <- train.x$Survived
train.x <- model.matrix(Survived~-1+.,data=train.x)
test.x <- model.matrix(~-1+.,data=test.x)
train.x <- train%>%mutate_at(vars(Pclass,SibSp,Parch,famsize,totsurvive),as.factor)
test.x <- test%>%mutate_at(vars(Pclass,SibSp,Parch,famsize,totsurvive),as.factor)%>%
select(-Survived)
train.y <- train.x$Survived
train.x <- model.matrix(Survived~-1+.,data=train.x)
test.x <- model.matrix(~-1+.,data=test.x)
cores <- 10
cl  <- makeCluster(cores, outfile="")
registerDoParallel(cl)
gamlr.fit <- cv.gamlr(train.x,train.y,nfold=cores,cl=cl)
stopCluster(cl)
plot(gamlr.fit)
lam.min <- gamlr.fit$lambda.min
gamlr.fit <- gamlr(train.x,train.y,family = "binomial",lambda.start = lam.min,)
test.pred <- predict(gamlr.fit,test.x,type="response")
train.y <- as.factor(train.x$Survived)
train.x <- train%>%mutate_at(vars(Pclass,SibSp,Parch,famsize,totsurvive),as.factor)
test.x <- test%>%mutate_at(vars(Pclass,SibSp,Parch,famsize,totsurvive),as.factor)%>%
select(-Survived)
train.y <- as.factor(train.x$Survived)
train.x <- model.matrix(Survived~-1+.,data=train.x)
test.x <- model.matrix(~-1+.,data=test.x)
cores <- 10
cl  <- makeCluster(cores, outfile="")
registerDoParallel(cl)
glmnet <- cv.glmnet(train.x,train.y,type.measure = "class",family = "binomial",parallel = T)
stopCluster(cl)
plot(gamlr.fit)
# cores <- 10
# cl  <- makeCluster(cores, outfile="")
# registerDoParallel(cl)
glmnet <- cv.glmnet(train.x,train.y,type.measure = "class",family = "binomial",alpha=0)
# stopCluster(cl)
plot(glmnet)
lasso.pred <- predict(glmnet,newx=test.x,type="class")
lasso.pred.train <- predict(glmnet,newx=train.x,type="class")
rm(lasso.pred.train)
lasso <- cv.glmnet(train.x,train.y,type.measure = "class",family = "binomial",alpha=0)
ridge <- cv.glmnet(train.x,train.y,type.measure = "class",family = "binomial",alpha=1)
train.x <- train%>%mutate_at(vars(Pclass,SibSp,Parch,famsize,totsurvive),as.factor)
test.x <- test%>%mutate_at(vars(Pclass,SibSp,Parch,famsize,totsurvive),as.factor)%>%
select(-Survived)
train.y <- as.factor(train.x$Survived)
train.x <- model.matrix(Survived~-1+.,data=train.x)
test.x <- model.matrix(~-1+.,data=test.x)
## simple covariates ##
set.seed(123)
lasso <- cv.glmnet(train.x,train.y,type.measure = "class",family = "binomial",alpha=0)
ridge <- cv.glmnet(train.x,train.y,type.measure = "class",family = "binomial",alpha=1)
lasso.pred <- predict(lasso,newx=test.x,type="class")
ridge.pred <- predict(ridge,newx=test.x,type="class")
table(lasso.pred,ridge.pred)
lasso.submit <- test$PassengerId
lasso.submit <- data.frame(PassengerId=test$PassengerId,Survived=lasso.pred)
View(lasso.submit)
lasso.submit <- data.frame(PassengerId=test$PassengerId, Survived = lasso.pred)
View(lasso.submit)
View(test)
lasso.submit <- data.frame(PassengerId=test$PassengerId, Survived = matrix(lasso.pred))
View(lasso.submit)
ridge.submit <- data.frame(PassengerId=test$PassengerId, Survived = matrix(ridge.pred))
table(lasso.submit$Survived)
table(ridge.submit$Survived)
plot(lasso)
plot(ridge)
coef(lasso)
colnames(train.x)
# Encode some vars
train.x <- train%>%mutate_at(vars(Pclass,SibSp,Parch,famsize,totsurvive),as.factor)
test.x <- test%>%mutate_at(vars(Pclass,SibSp,Parch,famsize,totsurvive),as.factor)%>%
select(-Survived)
train.y <- as.factor(train.x$Survived)
train.x <- model.matrix(Survived+PassengerId~-1+.,data=train.x)
test.x <- model.matrix(PassengerId~-1+.,data=test.x)
colnames(train.x)
## simple covariates ##
set.seed(123)
lasso <- cv.glmnet(train.x,train.y,type.measure = "class",family = "binomial",alpha=0)
ridge <- cv.glmnet(train.x,train.y,type.measure = "class",family = "binomial",alpha=1)
lasso.pred <- predict(lasso,newx=test.x,type="class")
ridge.pred <- predict(ridge,newx=test.x,type="class")
lasso.submit <- data.frame(PassengerId=test$PassengerId, Survived = matrix(lasso.pred))
ridge.submit <- data.frame(PassengerId=test$PassengerId, Survived = matrix(ridge.pred))
table(lasso.submit$Survived)
table(ridge.submit$Survived)
coef(lasso)
write.csv(lasso.submit,file="Lasso_submit.csv",row.names = F)
write.csv(ridge.submit,file="Ridge_submit.csv",row.names = F)
#############################
# Titanic prediction: Bench #
#############################
### Load packages ###
library(pacman)
p_load(tidyverse,caret,rpart,mice,stringr,Hmisc,glmnet,gamlr,ranger,RColorBrewer,doParallel)
### Load packages ###
vars <- c("PassengerId","Survived","Pclass","Sex","Age","SibSp","Parch","Fare","Embarked","title",
"famsize","mother","single","totsurvive","CabinNo")
train <- read.csv("data/train_clean.csv")%>%select(vars)%>%filter(CabinNo != "T")%>%droplevels()
test <- read.csv("data/test_clean.csv")%>%select(vars)
str(train)
train.male <- filter(train,Sex == "male")
train.female <- filter(train,Sex == "female")
test.male <- filter(test,Sex == "male")
test.female <- filter(test,Sex == "female")
train.male <- filter(train,Sex == "male")%>%select(-Sex,-mother)%>%droplevels()
train.female <- filter(train,Sex == "female")%>%select(-Sex)%>%droplevels()
test.male <- filter(test,Sex == "male")%>%select(-Sex,-mother)%>%droplevels()
test.female <- filter(test,Sex == "female")%>%select(-Sex)%>%droplevels()
?sample.split
??sample.split
#split into train into train and csv
split.m <- createDataPartition(train.male$Survived,p=0.75)
View(split.m)
#split into train into train and csv
split.m <- createDataPartition(train.male$Survived,p=0.75,list=T)
#split into train into train and csv
split.m <- createDataPartition(train.male$Survived,p=0.75,list=F)
split.f <- createDataPartition(train.female$Survived,p=0.75,list=F)
cv.train.m <- train.male[split.m,]
cv.test.m <- train.male[!split.m,]
cv.train.f <- train.female[split.f,]
cv.test.f <- train.female[!split.f,]
cv.test.m <- train.male[-split.m,]
cv.test.f <- train.female[-split.f,]
set.seed(100)
#split into train into train and csv
split.m <- createDataPartition(train.male$Survived,p=0.75,list=F)
split.f <- createDataPartition(train.female$Survived,p=0.75,list=F)
cv.train.m <- train.male[split.m,]
cv.test.m <- train.male[-split.m,]
cv.train.f <- train.female[split.f,]
cv.test.f <- train.female[-split.f,]
str(cv.train.m)
## model training
model.vars <- c("Pclass","Sex","Age","SibSp","Parch","Fare","Embarked","title",
"famsize","mother","single","totsurvive","CabinNo")
dim(model.matrix(~.,data=cv.train.m[,model.vars]))
dim(cv.train.m[,model.vars])
## model training
model.vars <- c("Pclass","Sex","Age","SibSp","Parch","Fare","Embarked","title",
"famsize","single","totsurvive","CabinNo")
dim(cv.train.m[,model.vars])
## model training
model.vars <- c("Pclass","Age","SibSp","Parch","Fare","Embarked","title",
"famsize","single","totsurvive","CabinNo")
# male
m.lasso <- cv.glmnet(model.matrix(~.,data=cv.train.m[,model.vars]),as.factor(cv.train.m$Survived),
family="binomial",alpha=0,type.measure = "class")
m.ridge <- cv.glmnet(model.matrix(~.,data=cv.train.m[,model.vars]),as.factor(cv.train.m$Survived),
family="binomial",alpha=1,type.measure = "class")
plot(m.lasso)
plot(m.ridge)
postResample(pred=predict(m.lasso,newx=model.matrix(~.,data=cv.test.m[,model.vars]),type="class"),cv.test.m$Survived)
predict(m.lasso,newx=model.matrix(~.,data=cv.test.m[,model.vars]),type="class")
confusionMatrix(pred=predict(m.lasso,newx=model.matrix(~.,data=cv.test.m[,model.vars]),type="class"),cv.test.m$Survived)
confusionMatrix(pred=predict(m.lasso,newx=model.matrix(~.,data=cv.test.m[,model.vars]),type="class"),reference = cv.test.m$Survived)
confusionMatrix(data=predict(m.lasso,newx=model.matrix(~.,data=cv.test.m[,model.vars]),type="class"),reference = cv.test.m$Survived)
confusionMatrix(data=predict(m.lasso,newx=model.matrix(~.,data=cv.test.m[,model.vars]),type="class"),
reference = as.factor(cv.test.m$Survived))
m.lasso <- cv.glmnet(model.matrix(~.,data=cv.train.m[,model.vars]),cv.train.m$Survived,
family="binomial",alpha=0,type.measure = "class")
m.ridge <- cv.glmnet(model.matrix(~.,data=cv.train.m[,model.vars]),cv.train.m$Survived,
family="binomial",alpha=1,type.measure = "class")
predict(m.lasso,newx=model.matrix(~.,data=cv.test.m[,model.vars]),type="class")
cv.test.m$Survived
as.factor(cv.test.m$Survived)
confusionMatrix(data=predict(m.lasso,newx=model.matrix(~.,data=cv.test.m[,model.vars]),type="class"),
reference = as.character(cv.test.m$Survived))
as.character(cv.test.m$Survived)
str(as.character(cv.test.m$Survived))
str(as.factor(cv.test.m$Survived))
str(predict(m.lasso,newx=model.matrix(~.,data=cv.test.m[,model.vars]),type="class"))
predict(m.lasso,newx=model.matrix(~.,data=cv.test.m[,model.vars]))
confusionMatrix(data=as.factor(predict(m.lasso,newx=model.matrix(~.,data=cv.test.m[,model.vars]),type="class")),
reference = as.character(cv.test.m$Survived))
m.lasso.pred <- predict(m.lasso,newx=model.matrix(~.,data=cv.test.m[,model.vars]),type="class")
m.ridge.pred <- predict(m.ridge,newx=model.matrix(~.,data=cv.test.m[,model.vars]),type="class")
str(cv.test.m$Survived)
as.charcter(str(cv.test.m$Survived))
as.character(str(cv.test.m$Survived))
str(as.character(cv.test.m$Survived))
confusionMatrix(m.lasso.pred,as.character(cv.test.m$Survived))
str(m.lasso.pred)
table(m.lasso.pred,as.character(cv.test.m$Survived))
table(m.ridge.pred,as.character(cv.test.m$Survived))
confusionMatrix(as.character(m.lasso.pred),as.character(cv.test.m$Survived))
as.character(m.lasso.pred)
as.character(cv.test.m$Survived)
model.matrix(~.,data=cv.test.m[,model.vars])
recode(cv.train.f$Survived,"0"="No","1"="Yes")
cv.train.f$Survived
train.male <- filter(train,Sex == "male")%>%select(-Sex,-mother)%>%droplevels()%>%recode(Survived,"0"="No","1"="Yes")
train.female <- filter(train,Sex == "female")%>%select(-Sex)%>%droplevels()%>%recode(Survived,"0"="No","1"="Yes")
test.male <- filter(test,Sex == "male")%>%select(-Sex,-mother)%>%droplevels()
test.female <- filter(test,Sex == "female")%>%select(-Sex)%>%droplevels()
set.seed(100)
#split into train into train and csv
split.m <- createDataPartition(train.male$Survived,p=0.75,list=F)
split.f <- createDataPartition(train.female$Survived,p=0.75,list=F)
cv.train.m <- train.male[split.m,]
cv.test.m <- train.male[-split.m,]
cv.train.f <- train.female[split.f,]
cv.test.f <- train.female[-split.f,]
## model training
model.vars <- c("Pclass","Age","SibSp","Parch","Fare","Embarked","title",
"famsize","single","totsurvive","CabinNo")
# male
m.lasso <- cv.glmnet(model.matrix(~.,data=cv.train.m[,model.vars]),cv.train.m$Survived,
family="binomial",alpha=0,type.measure = "class")
m.ridge <- cv.glmnet(model.matrix(~.,data=cv.train.m[,model.vars]),cv.train.m$Survived,
family="binomial",alpha=1,type.measure = "class")
m.lasso.pred <- predict(m.lasso,newx=model.matrix(~.,data=cv.test.m[,model.vars]),type="class")
m.ridge.pred <- predict(m.ridge,newx=model.matrix(~.,data=cv.test.m[,model.vars]),type="class")
train.male <- filter(train,Sex == "male")%>%select(-Sex,-mother)%>%droplevels()%>%
mutate(Survived=recode(Survived,"0"="No","1"="Yes"))
recode(Survived,"0"="No","1"="Yes")
train.female <- filter(train,Sex == "female")%>%select(-Sex)%>%droplevels()%>%
mutate(Survived=recode(Survived,"0"="No","1"="Yes"))
test.male <- filter(test,Sex == "male")%>%select(-Sex,-mother)%>%droplevels()
test.female <- filter(test,Sex == "female")%>%select(-Sex)%>%droplevels()
str(train.male)
set.seed(100)
#split into train into train and csv
split.m <- createDataPartition(train.male$Survived,p=0.75,list=F)
split.f <- createDataPartition(train.female$Survived,p=0.75,list=F)
cv.train.m <- train.male[split.m,]
cv.test.m <- train.male[-split.m,]
cv.train.f <- train.female[split.f,]
cv.test.f <- train.female[-split.f,]
## model training
model.vars <- c("Pclass","Age","SibSp","Parch","Fare","Embarked","title",
"famsize","single","totsurvive","CabinNo")
# male
m.lasso <- cv.glmnet(model.matrix(~.,data=cv.train.m[,model.vars]),cv.train.m$Survived,
family="binomial",alpha=0,type.measure = "class")
m.ridge <- cv.glmnet(model.matrix(~.,data=cv.train.m[,model.vars]),cv.train.m$Survived,
family="binomial",alpha=1,type.measure = "class")
m.lasso.pred <- predict(m.lasso,newx=model.matrix(~.,data=cv.test.m[,model.vars]),type="class")
m.ridge.pred <- predict(m.ridge,newx=model.matrix(~.,data=cv.test.m[,model.vars]),type="class")
table(m.lasso.pred,cv.test.m$Survived)
confusionMatrix(m.lasso.pred,cv.test.m$Survived)
confusionMatrix(factor(m.lasso.pred),factor(cv.test.m$Survived))
confusionMatrix(factor(m.ridge.pred),factor((cv.test.m$Survived)))
# female
f.lasso <- cv.glmnet(model.matrix(~.,data=cv.train.f[,model.vars]),cv.train.f$Survived,
family="binomial",alpha=0,type.measure = "class")
f.ridge <- cv.glmnet(model.matrix(~.,data=cv.train.f[,model.vars]),cv.train.f$Survived,
family="binomial",alpha=1,type.measure = "class")
f.lasso.pred <- predict(f.lasso,newx=model.matrix(~.,data=cv.test.f[,model.vars]),type="class")
f.ridge.pred <- predict(f.ridge,newx=model.matrix(~.,data=cv.test.f[,model.vars]),type="class")
confusionMatrix(factor(f.lasso.pred),factor(cv.test.f$Survived))
confusionMatrix(factor(f.ridge.pred),factor((cv.test.f$Survived)))
# Fit ridge on Male and Female separately
m.ridge <- cv.glmnet(model.matrix(~.,data=train.male[,model.vars]),train.male$Survived,
family="binomial",alpha=0,type.measure = "class")
f.ridge <- cv.glmnet(model.matrix(~.,data=train.female[,model.vars]),train.female$Survived,
family="binomial",alpha=0,type.measure = "class")
f.test.pred <- predict(m.ridge,newx=model.matrix(~.,data=test.male[,model.vars]),type="class")
m.test.pred <- predict(m.ridge,newx=model.matrix(~.,data=test.male[,model.vars]),type="class")
f.test.pred <- predict(f.ridge,newx=model.matrix(~.,data=test.female[,model.vars]),type="class")
str(test.male)
test.male$Survived <- m.test.pred
str(test.male)
test.male$Survived <- m.test.pred%>%recode(Survived,"No"=0,"Yes"=1)
test.male$Survived <- m.test.pred%>%mutate(Survived = if_else(Survived == "No",0,1))
test.male <- test.male%>%mutate(Survived = if_else(Survived == "No",0,1))
str(test.male)
test.female$Survived <- f.test.pred
test.female <- test.female%>%mutate(Survived = if_else(Survived == "No",0,1))
ridge.gender.submit <- rbind(test.male,test.female)%>%
select(PassengerId,Survived)
test.male <- test.male%>%mutate(Survived = if_else(Survived == "No",0,1))%>%select(PassengerId,Survived)
test.female <- test.female%>%mutate(Survived = if_else(Survived == "No",0,1))%>%select(PassengerId,Survived)
View(test.female)
View(test.female)
train.male <- filter(train,Sex == "male")%>%select(-Sex,-mother)%>%droplevels()%>%
mutate(Survived=recode(Survived,"0"="No","1"="Yes"))
recode(Survived,"0"="No","1"="Yes")
train.female <- filter(train,Sex == "female")%>%select(-Sex)%>%droplevels()%>%
mutate(Survived=recode(Survived,"0"="No","1"="Yes"))
test.male <- filter(test,Sex == "male")%>%select(-Sex,-mother)%>%droplevels()
test.female <- filter(test,Sex == "female")%>%select(-Sex)%>%droplevels()
set.seed(100)
#split into train into train and csv
split.m <- createDataPartition(train.male$Survived,p=0.75,list=F)
split.f <- createDataPartition(train.female$Survived,p=0.75,list=F)
cv.train.m <- train.male[split.m,]
cv.test.m <- train.male[-split.m,]
cv.train.f <- train.female[split.f,]
cv.test.f <- train.female[-split.f,]
## model training
model.vars <- c("Pclass","Age","SibSp","Parch","Fare","Embarked","title",
"famsize","single","totsurvive","CabinNo")
# male
m.lasso <- cv.glmnet(model.matrix(~.,data=cv.train.m[,model.vars]),cv.train.m$Survived,
family="binomial",alpha=0,type.measure = "class")
m.ridge <- cv.glmnet(model.matrix(~.,data=cv.train.m[,model.vars]),cv.train.m$Survived,
family="binomial",alpha=1,type.measure = "class")
m.lasso.pred <- predict(m.lasso,newx=model.matrix(~.,data=cv.test.m[,model.vars]),type="class")
m.ridge.pred <- predict(m.ridge,newx=model.matrix(~.,data=cv.test.m[,model.vars]),type="class")
confusionMatrix(factor(m.lasso.pred),factor(cv.test.m$Survived))
confusionMatrix(factor(m.ridge.pred),factor((cv.test.m$Survived))) # ridge is better
# female
f.lasso <- cv.glmnet(model.matrix(~.,data=cv.train.f[,model.vars]),cv.train.f$Survived,
family="binomial",alpha=0,type.measure = "class")
f.ridge <- cv.glmnet(model.matrix(~.,data=cv.train.f[,model.vars]),cv.train.f$Survived,
family="binomial",alpha=1,type.measure = "class")
f.lasso.pred <- predict(f.lasso,newx=model.matrix(~.,data=cv.test.f[,model.vars]),type="class")
f.ridge.pred <- predict(f.ridge,newx=model.matrix(~.,data=cv.test.f[,model.vars]),type="class")
confusionMatrix(factor(f.lasso.pred),factor(cv.test.f$Survived))
confusionMatrix(factor(f.ridge.pred),factor((cv.test.f$Survived))) # Ridge again does better
# Fit ridge on Male and Female separately
m.ridge <- cv.glmnet(model.matrix(~.,data=train.male[,model.vars]),train.male$Survived,
family="binomial",alpha=0,type.measure = "class")
f.ridge <- cv.glmnet(model.matrix(~.,data=train.female[,model.vars]),train.female$Survived,
family="binomial",alpha=0,type.measure = "class")
m.test.pred <- predict(m.ridge,newx=model.matrix(~.,data=test.male[,model.vars]),type="class")
f.test.pred <- predict(f.ridge,newx=model.matrix(~.,data=test.female[,model.vars]),type="class")
test.male$Survived <- m.test.pred
test.male <- test.male%>%mutate(Survived = if_else(Survived == "No",0,1))%>%select(PassengerId,Survived)
test.female$Survived <- f.test.pred
test.female <- test.female%>%mutate(Survived = if_else(Survived == "No",0,1))%>%select(PassengerId,Survived)
View(train.female)
View(test.male)
View(test.female)
ridge.gender.submit <- rbind(test.male,test.female)
write.csv(ridge.gender.submit,file="Ridge_submit_gender.csv",row.names = F) #0.46411
# gender model + randomForest
rf.form <- as.formula(paste0("Survived~",paste(model.vars,collapse="+")))
rf.form
str(test.male)
train.male <- filter(train,Sex == "male")%>%select(-Sex,-mother)%>%droplevels()%>%
mutate(Survived=recode(Survived,"0"="No","1"="Yes"))
recode(Survived,"0"="No","1"="Yes")
train.female <- filter(train,Sex == "female")%>%select(-Sex)%>%droplevels()%>%
mutate(Survived=recode(Survived,"0"="No","1"="Yes"))
test.male <- filter(test,Sex == "male")%>%select(-Sex,-mother)%>%droplevels()
test.female <- filter(test,Sex == "female")%>%select(-Sex)%>%droplevels()
train.male <- filter(train,Sex == "male")%>%select(-Sex,-mother)%>%droplevels()%>%
mutate(Survived=recode(Survived,"0"="No","1"="Yes"))
train.female <- filter(train,Sex == "female")%>%select(-Sex)%>%droplevels()%>%
mutate(Survived=recode(Survived,"0"="No","1"="Yes"))
test.male <- filter(test,Sex == "male")%>%select(-Sex,-mother)%>%droplevels()
test.female <- filter(test,Sex == "female")%>%select(-Sex)%>%droplevels()
str(train.male)
m.rf <- ranger(rf.form,data=test.male,num.trees=1000)
m.rf <- ranger(rf.form,data=train.male,num.trees=1000)
f.rf <- ranger(rf.form,data=train.female,num.trees=1000)
seq(2,12,2)
seq(500,2000,200)
test.rf <- ranger(rf.form,test.male,num.trees=500,importance="impurity")
test.rf <- ranger(rf.form,rain.male,num.trees=500,importance="impurity")
test.rf <- ranger(rf.form,train.male,num.trees=500,importance="impurity")
test.rf$variable.importance %>%
tidy() %>%
dplyr::arrange(desc(x)) %>%
dplyr::top_n(25) %>%
ggplot(aes(reorder(names, x), x)) +
geom_col() +
coord_flip() +
ggtitle("Top 25 important variables")
test.rf$variable.importance %>%
broom::tidy() %>%
dplyr::arrange(desc(x)) %>%
dplyr::top_n(25) %>%
ggplot(aes(reorder(names, x), x)) +
geom_col() +
coord_flip() +
ggtitle("Top 25 important variables")
?predict.ranger
test.pred <- predict(test.rf,data=train.female)
View(test.pred)
test.pred <- predict(test.rf,data=train.female)$predictions
confusionMatrix(test.pred,train.female$Survived)
confusionMatrix(factor(test.pred),factor(train.female$Survived))
test.acc <- confusionMatrix(factor(test.pred),factor(train.female$Survived))
View(test.acc)
test.acc
test.acc$overall
test.acc$overall[1]
test.acc <- confusionMatrix(factor(test.pred),factor(train.female$Survived))$overall["Accuracy"]
test.acc
rm(test.rf,tesst.pred,test.acc)
rm(test.rf,test.pred,test.acc)
grid <- expand.grid(
num.trees=seq(500,2000,100),mtry = seq(2,12,2),sampe_size = c(.55, .632, .70, .80),acc=0
)
View(grid)
set.seed(100)
split.m <- createDataPartition(train.male$Survived,p=0.75,list=F)
split.f <- createDataPartition(train.female$Survived,p=0.75,list=F)
grid <- expand.grid(
num.trees=seq(500,2000,100),mtry = seq(2,12,2),sampe_size = c(.55, .632, .70, .80),acc_m=0,acc_f=0
)
train.male[-split.m,]
set.seed(100)
split.m <- createDataPartition(train.male$Survived,p=0.75,list=F)
split.f <- createDataPartition(train.female$Survived,p=0.75,list=F)
# cv.train.m <- train.male[split.m,]
# cv.test.m <- train.male[-split.m,]
#
# cv.train.f <- train.female[split.f,]
# cv.test.f <- train.female[-split.f,]
for(i in 1:nrow(grid)){
# male
male <- ranger(rf.form,data=train.male[split.m,],
num.trees=grid$num.trees[i],
mtry=grid$mtry[i],
sample.fraction=grid$sampe_size[i],
seed=123)
pred_male <- predict(male,data=train.male[-split.m,])$predictions
grid$acc_m[i] <- confusionMatrix(factor(pred_male),factor(train.male[-split.m,"Survived"]))$overall["Accuracy"]
# female
female <- ranger(rf.form,data=train.female[split.f,],
num.trees=grid$num.trees[i],
mtry=grid$mtry[i],
sample.fraction=grid$sampe_size[i],
seed=123)
pred_female <- predict(female,data=train.female[-split.f,])$predictions
grid$acc_f[i] <- confusionMatrix(factor(pred_female),factor(train.female[-split.f,"Survived"]))$overall["Accuracy"]
}
grid <- expand.grid(
num.trees=seq(500,2000,100),mtry = seq(2,11,2),sampe_size = c(.55, .632, .70, .80),acc_m=0,acc_f=0
)
grid <- expand.grid(
num.trees=seq(500,2000,100),mtry = seq(2,11,2),sampe_size = c(.55, .632, .70, .80),acc_m=0,acc_f=0
)
# break into cv
set.seed(100)
split.m <- createDataPartition(train.male$Survived,p=0.75,list=F)
split.f <- createDataPartition(train.female$Survived,p=0.75,list=F)
# cv.train.m <- train.male[split.m,]
# cv.test.m <- train.male[-split.m,]
#
# cv.train.f <- train.female[split.f,]
# cv.test.f <- train.female[-split.f,]
for(i in 1:nrow(grid)){
# male
male <- ranger(rf.form,data=train.male[split.m,],
num.trees=grid$num.trees[i],
mtry=grid$mtry[i],
sample.fraction=grid$sampe_size[i],
seed=123)
pred_male <- predict(male,data=train.male[-split.m,])$predictions
grid$acc_m[i] <- confusionMatrix(factor(pred_male),factor(train.male[-split.m,"Survived"]))$overall["Accuracy"]
# female
female <- ranger(rf.form,data=train.female[split.f,],
num.trees=grid$num.trees[i],
mtry=grid$mtry[i],
sample.fraction=grid$sampe_size[i],
seed=123)
pred_female <- predict(female,data=train.female[-split.f,])$predictions
grid$acc_f[i] <- confusionMatrix(factor(pred_female),factor(train.female[-split.f,"Survived"]))$overall["Accuracy"]
}
male.rf <- ranger(rf.form,data=train.male,num.trees=500,mtry=4,sample.fraction=0.7)
female.rf <- ranger(rf.form,data=train.female,num.trees=500,mtry=6,sample.fraction=0.632)
female.predict.rf <- predict(female.rf,test.female,num.trees=500)$predictions
test.male$Survived <- male.predict.rf
test.female$Survived <- female.predict.rf
male.predict.rf <- predict(male.rf,test.male,num.trees=500)$predictions
test.male$Survived <- male.predict.rf
test.female$Survived <- female.predict.rf
str(test.male)
str(test.female)
submit <- bind_rows(test.male,test.female)
View(submit)
submit <- bind_rows(test.male,test.female)%>%
select(PassengerId,Survived)%>%
mutate(Survived=if_else(Survived=="No",0,1))
write.csv(submit,file="RF_gender.csv",row.names = F) #0.79904
male.rf.kcv <- train(rf.form,method="ranger",trControl=fitControl,verbose=T)
male.rf.kcv <- train(rf.form,data=train.male,method="ranger",trControl=fitControl,verbose=T)
### Model 3b: K-fold RForest ###
fitControl <- trainControl(method="repeatedcv",number=10,repeats=10)
male.rf.kcv <- train(rf.form,data=train.male,method="ranger",trControl=fitControl,verbose=T)
str(train.male)
male.rf.kcv
View(grid)
set.seed(1234)
grid <- expand.grid(
num.trees=seq(500,2000,100),mtry = seq(2,11,2),sampe_size = c(.55, .632, .70, .80),acc_m=0,acc_f=0
)
male.rf.kcv <- train(rf.form,data=train.male,method="ranger",trControl=fitControl,tuneGrid=grid,verbose=T)
male.rf.kcv <- train(rf.form,data=train.male,method="ranger",trControl=fitControl,verbose=T)
female.rf.kcv <- train(rf.form,data=train.female,method="ranger",trControl=fitControl,verbose=T)
plot(male.rf.kcv)
### Model 3b: K-fold RForest ###
fitControl <- trainControl(method="repeatedcv",number=4,repeats=10)
male.rf.kcv <- train(rf.form,data=train.male,method="ranger",trControl=fitControl,verbose=T)
female.rf.kcv <- train(rf.form,data=train.female,method="ranger",trControl=fitControl,verbose=T)
View(female.rf.kcv)
male.rf.kcv <- train(rf.form,data=train.male,method="ranger",trControl=fitControl,metric="twoClassSummary")
### Model 3b: K-fold RForest ###
fitControl <- trainControl(method="repeatedcv",number=4,repeats=10,classProbs = TRUE)
set.seed(1234)
male.rf.kcv <- train(rf.form,data=train.male,method="ranger",trControl=fitControl,metric = "ROC")
female.rf.kcv <- train(rf.form,data=train.female,method="ranger",trControl=fitControl,metric = "ROC")
male.rf.kcv
female.rf.kcv
predict(male.rf.kcv,test.male)
male.predict.rf.kcv <- predict(male.rf.kcv,test.male)
female.predict.rf.kcv <- predict(female.rf.kcv,test.female)
test.male$Survived <- male.predict.rf.kcv
test.female$Survived <- female.predict.rf.kcv
submit.kcv <- bind_rows(test.male,test.female)%>%
select(PassengerId,Survived)%>%
mutate(Survived=if_else(Survived=="No",0,1))
write.csv(submit.kcv,file="RF_kcv_gender.csv",row.names = F) #0.79425 Not an improvement over simple Ridge; Shame
